---
# Install the given ruby edition in the given version using ruby-install for most of the process
# which takes care of all the things needed behind the scenes.
# Additional this play also installs bundler and does the symlinking.

- name: Output ruby edition and version to be installed
  ansible.builtin.debug:
    msg: "{{ ruby_edition }} - {{ ruby_version }}"

- name: Add apt repositories for ruby dependencies
  ansible.builtin.apt_repository: repo={{ item }} state=present update_cache=yes
  with_items: "{{ ruby_deps_apt_repos }}"

- name: Ensure all dependencies are met to run the ruby-install tool without problems
  become: true
  ansible.builtin.apt:
    name:
      - wget
      - bzip2
      - tar
      - patch
      # Most ruby apps need this dependency, hence adding it here too
      - libcurl4-openssl-dev
    state: present

- name: Install given ruby version from source using ruby-install
  ansible.builtin.command:
    cmd: ruby-install {{ ruby_edition }} {{ ruby_version }} --install-dir {{ ruby_location }} --cleanup --no-reinstall
  args:
    creates: "{{ ruby_executable }}"
  when: ruby_edition != 'jruby'

# --- Jruby special treament ---
# Accept Java license in case Oracle Java is being used
- name: Accept Oracle license prior JDK installation
  ansible.builtin.shell:
    cmd: echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections; echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections creates=/usr/lib/jvm/java-8-oracle
  when: ruby_edition == 'jruby' and jruby_jre_package is match('oracle')

# ruby-install is installing full java (not just headless-jre).
# This includes also GUI and sound packages which are not needed to run ruby and are a liability
# when installing on a server. See https://github.com/postmodern/ruby-install/pull/131
# This role thus alows selecting your own java package, this is also handy if you want another
# java edition (such as oracle java)

- name: Install Jruby dependencies (Java) manually as the ruby-install would do too much
  ansible.builtin.apt:
    name: '{{ jruby_jre_package }}'
    state: present
  when: ruby_edition == 'jruby'

# Workaround for https://github.com/jruby/jruby/issues/3285 for jruby versions > 1.7.21
- name: Install Jruby dependency (libc6-dev) to fix a problem with libcrypt which is otherwise not found by jrubies gem command
  ansible.builtin.apt:
    name: libc6-dev
    state: present
  when: ruby_edition == 'jruby'

- name: Install given jruby version from source using ruby-install (for jruby we need to disable dependency install to not create a mess)
  ansible.builtin.command:
    cmd: ruby-install {{ ruby_edition }} {{ ruby_version }} --install-dir {{ rubies_dir }} --cleanup --no-install-deps --no-reinstall
  args:
    creates: "{{ ruby_executable }}"
  when: ruby_edition == 'jruby'
# --- end of Jruby special treatment ---

- name: Output executable paths (as they are calculated)
  ansible.builtin.debug:
    msg: "Ruby executable: {{ ruby_executable }} | Gem executable: {{ gem_executable }}"

# See docs for gem install/update at https://guides.rubygems.org/command-reference/
# Some notes on workarrounds added here:
# * 'gem update --system' is necessary to always ensure RubyGems is up to date enough for gem install bundler to work / for detecting recent bundlers
# * 'gem install bundler' needs the '--force' option as it otherwise won't work after a 'gem update --system', see issue https://github.com/rubygems/rubygems/issues/2058
# * The '-N' option is used to not generate documentation (shorthand for --no-document)
- name: Install Bundler (after making sure latest RubyGems is installed)
  ansible.builtin.shell:
    cmd: "{{ gem_executable }} update -N --system && {{ gem_executable }} install -N --force bundler"
    creates: "{{ ruby_location }}/bin/bundle"
  when: ruby_bundler_installing|bool

- name: Install latest bundler (also updates if bin/bundle already exists)
  ansible.builtin.shell:
    cmd: "{{ gem_executable }} install -N bundler"
  when:
    - ruby_bundler_installing|bool
    - ruby_bundler_update|bool

- name: Install specific bundler version (also updates if bin/bundle already exists)
  ansible.builtin.shell:
    cmd: "{{ gem_executable }} install -N -v {{ ruby_bundler_version }} bundler"
  when:
    - ruby_bundler_installing|bool
    - ruby_bundler_version is defined

- name: Install other system gems
  ansible.builtin.shell:
    cmd: "{{ gem_executable }} install {{ item }}"
  with_items: "{{ ruby_system_gems }}"

- name: Get all files in ruby bin directory
  ansible.builtin.find:
    paths: "{{ ruby_location }}/bin/"
    patterns: '*'
    file_type: file
  register: ruby_bin_files

- name: Symlink all Ruby bins from /usr/local/bin
  become: true
  ansible.builtin.file:
    path: "/usr/local/bin/{{ item.path.split('/')|last }}"
    src: "{{ item.path }}"
    state: link
  with_items: "{{ ruby_bin_files.files }}"
  when:
    - ruby_bin_symlinking|bool
    - not "/usr/local/bin/{{ item.path.split('/')|last }}" is exists

- name: Collect Ruby infos
  ansible.builtin.shell:
    cmd: "whoami && ruby -v && gem -v && bundle -v"
  register: ruby_infos

- name: Output Ruby infos
  ansible.builtin.debug:
    var: ruby_infos.stdout_lines
